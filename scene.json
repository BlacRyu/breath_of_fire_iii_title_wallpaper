{
	"camera" : 
	{
		"center" : "0.00000 0.00000 -1.00000",
		"eye" : "0.00000 0.00000 0.00000",
		"up" : "0.00000 1.00000 0.00000"
	},
	"general" : 
	{
		"ambientcolor" : "0.30196 0.30196 0.30196",
		"bloom" : false,
		"bloomhdrfeather" : 0.1,
		"bloomhdriterations" : 8,
		"bloomhdrscatter" : 1.619,
		"bloomhdrstrength" : 2.0,
		"bloomhdrthreshold" : 1.0,
		"bloomstrength" : 2.0,
		"bloomthreshold" : 0.64999998,
		"bloomtint" : "1.00000 1.00000 1.00000",
		"camerafade" : true,
		"cameraparallax" : false,
		"cameraparallaxamount" : 0.5,
		"cameraparallaxdelay" : 0.1,
		"cameraparallaxmouseinfluence" : 0.5,
		"camerapreview" : true,
		"camerashake" : false,
		"camerashakeamplitude" : 0.5,
		"camerashakeroughness" : 1.0,
		"camerashakespeed" : 3.0,
		"clearcolor" : "0.00000 0.00000 0.00000",
		"clearenabled" : true,
		"farz" : 10000.0,
		"fov" : 50.0,
		"hdr" : false,
		"nearz" : 0.0099999998,
		"orthogonalprojection" : 
		{
			"height" : 192,
			"width" : 992
		},
		"perspectiveoverridefov" : 30.0,
		"skylightcolor" : "0.30000 0.30000 0.30000",
		"zoom" : 1.0
	},
	"objects" : 
	[
		{
			"id" : 118,
			"locktransforms" : true,
			"name" : "OMGHelpers (script class)",
			"origin" : "496.00000 96.00000 0.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addColor({\n\t\tname: 'debugText_FlashColor',\n\t\tlabel: 'Debug Flash Color',\n\t\tvalue: new Vec3(0.5, 1.0, 1.0)\n\t})\n\t.finish();\n\nlet bEnableDebugText = true;\nlet debugText_Layers = [];\n// let debugText_FlashColor = new Vec3(0.5, 1.0, 1.0);\nlet debugText_Color = new Vec3(1.0, 1.0, 1.0);\nlet debugText_ShowBackground = true;\nlet debugText_BackgroundColor = new Vec3(0.1, 0.1, 0.1);\nlet debugText_Size = 5;\nlet debugText_Alpha = 0.75;\nlet debugText_FlashScale = 1.01;\n/** How many milliseconds to fade from the flash color to the normal color when the text is updated. */\nlet debugText_FlashTime = 250;\n/** How many milliseconds to display the text before starting to fade out. */\nlet debugText_DisplayTime = 500;\n/** How many milliseconds to fade out the debug text before removing it. */\nlet debugText_FadeTime = 1500;\n\n\nlet _canvasToScreen = 1.0;\n\n\nexport function update() {\n\tlet currentTime = new Date().getTime();\n\tlet linesDisplayed = 0;\n\t\n\tdebugText_Layers.forEach(\n\t\tfunction(textLayer, index, array) {\n\t\t\tlet displayTime = textLayer.displayTime || debugText_DisplayTime;\n\t\t\tif (currentTime > textLayer.lastUpdated + (displayTime + debugText_FadeTime)) {\n\t\t\t\ttextLayer.alpha = 0;\n\t\t\t\tthisScene.destroyLayer(textLayer);\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (currentTime > textLayer.lastUpdated + displayTime) {\n\t\t\t\ttextLayer.color = debugText_Color;\n\t\t\t\tlet fadeLerp = (currentTime - (textLayer.lastUpdated + displayTime)) / debugText_FadeTime;\n\t\t\t\ttextLayer.alpha = OMGHelpers.lerp(debugText_Alpha, 0, fadeLerp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet flashLerp = OMGHelpers.clamp((currentTime - textLayer.lastChanged) / debugText_FlashTime);\n\t\t\t\ttextLayer.color = OMGHelpers.lerp(scriptProperties.debugText_FlashColor, debugText_Color, flashLerp);\n\t\t\t\ttextLayer.scale = new Vec3(OMGHelpers.lerp(debugText_FlashScale * _canvasToScreen, 1 * _canvasToScreen, flashLerp));\n\t\t\t\ttextLayer.alpha = debugText_Alpha;\n\t\t\t}\n\n\t\t\tif (engine.canvasSize.x !== 0) {\n\t\t\t\tlet cornerY = engine.canvasSize.y;\n\t\t\t\tlet cornerX = 0;\n\t\t\t\tlet screenAspectRatio = engine.screenResolution.x / engine.screenResolution.y;\n\t\t\t\tlet canvasAspectRatio = engine.canvasSize.x / engine.canvasSize.y;\n\t\t\t\tif (screenAspectRatio > canvasAspectRatio) {\n\t\t\t\t\tcornerY = engine.screenResolution.y * engine.canvasSize.x / engine.screenResolution.x;\n\t\t\t\t\tcornerY += (engine.canvasSize.y - cornerY) / 2;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcornerX = engine.screenResolution.x * engine.canvasSize.y / engine.screenResolution.y;\n\t\t\t\t\tcornerX = (engine.canvasSize.x - cornerX) / 2;\n\t\t\t\t}\n\t\t\t\ttextLayer.origin = new Vec3(cornerX, cornerY - linesDisplayed * (debugText_Size * 4.9 - 0.5) * _canvasToScreen, 0);\n\t\t\t}\n\t\t\telse { // 3D Scene\n\t\t\t\tlet aspectRatio = engine.screenResolution.x / engine.screenResolution.y;\n\t\t\t\tlet ct = thisScene.getCameraTransforms();\n\t\t\t\tlet forward = ct.center.subtract(ct.eye).normalize();\n\t\t\t\tlet up = ct.up;\n\t\t\t\tlet right = forward.cross(up);\n\t\t\t\tlet pos = ct.eye.add(forward).add(up.multiply(0.45)).add(right.multiply(-0.45 * aspectRatio));\n\t\t\t\tpos.y -= linesDisplayed * (debugText_Size * .002);\n\t\t\t\ttextLayer.origin = new Vec3(pos.x, pos.y, pos.z);\n\t\t\t\ttextLayer.scale = new Vec3(0.0005);\n\t\t\t}\n\t\t\ttextLayer.pointsize = debugText_Size;\n\t\t\ttextLayer.visible = bEnableDebugText;\n\t\t\tlinesDisplayed += textLayer.text.split('\\n').length;\n\t\t}\n\t);\n}\n\n\nexport function init() {\n\t_canvasToScreen = Math.min(engine.canvasSize.x / engine.screenResolution.x, engine.canvasSize.y / engine.screenResolution.y);\n}\n\n\nexport function resizeScreen() {\n\t_canvasToScreen = Math.min(engine.canvasSize.x / engine.screenResolution.x, engine.canvasSize.y / engine.screenResolution.y);\n}\n\n\n\n\nclass OMGHelpers {\n\t/** Prints all key/value pairs present on the object to the console. */\n\tstatic printObjectValues(obj){\n\t\tif (typeof(obj) !== 'object' || obj === null)\n\t\t\treturn;\n\n\t\tfor (const key of Object.keys(obj))\n\t\t\tconsole.log(key + \" - \" + obj[key]);\n\t}\n\n\t/** Attempts to add two values together. */\n\tstatic add(v1, v2) {\n\t\tif (!v2)\n\t\t\treturn v1;\n\t\telse if (typeof v1 === 'number' || typeof v1 === 'string')\n\t\t\treturn v1 + v2;\n\t\telse if (v1.add)\n\t\t\treturn v1.add(v2);\n\t\telse\n\t\t\treturn undefined;\n\t}\n\n\t/** Attempts to subtract the second value from the first value. */\n\tstatic subtract(v1, v2) {\n\t\tif (!v2)\n\t\t\treturn v1;\n\t\telse if (typeof v1 === 'number' || typeof v1 === 'string')\n\t\t\treturn v1 - v2;\n\t\telse if (v1.subtract)\n\t\t\treturn v1.subtract(v2);\n\t\telse\n\t\t\treturn undefined;\n\t}\n\n\t/** Attempts to multiply two values together. */\n\tstatic multiply(v1, v2) {\n\t\tif (v2 === undefined)\n\t\t\treturn undefined;\n\t\telse if (typeof v1 === 'number' || typeof v1 === 'string')\n\t\t\treturn v1 * v2;\n\t\telse if (v1.multiply)\n\t\t\treturn v1.multiply(v2);\n\t\telse\n\t\t\treturn undefined;\n\t}\n\n\t/** Attempts to divide the first value by the second value. */\n\tstatic divide(v1, v2) {\n\t\tif (!v2)\n\t\t\treturn undefined;\n\t\telse if (typeof v1 === 'number' || typeof v1 === 'string')\n\t\t\treturn v1 * v2;\n\t\telse if (v1.multiply)\n\t\t\treturn v1.multiply(v2);\n\t\telse\n\t\t\treturn undefined;\n\t}\n\n\t/**\n\t * True if the two parameters are the same type and contain equal values, otherwise false\n\t * @param [epsilon] {number} The minimum difference allowed between number values before they are considered non-equal (helps avoid some floating-point issues)\n\t * @return {boolean}\n\t */\n\tstatic equal(v1, v2, epsilon = 0.0001){\n\t\tif (v1 instanceof Vec3) {\n\t\t\tif (v2 instanceof Vec3)\n\t\t\t\treturn (Math.abs(v1.x - v2.x) < epsilon && Math.abs(v1.y - v2.y) < epsilon && Math.abs(v1.z - v1.z) < epsilon);\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (v1 instanceof Vec2) {\n\t\t\tif (v2 instanceof Vec2)\n\t\t\t\treturn (Math.abs(v1.x - v2.x) < epsilon && Math.abs(v1.y - v2.y) < epsilon);\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse switch (typeof v1) {\n\t\tcase \"number\":\n\t\t\tif (typeof v2 === \"number\")\n\t\t\t\treturn (Math.abs(v1 - v2) < epsilon);\n\t\t\telse\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn (v1 === v2);\n\t\t}\n\t}\n\n\t/** Restricts a value to remain between two boundary values. \n\t * @param {number} val - The value to be restricted.\n\t * @param {number} bound1 - The first boundary.\n\t * @param {number} bound2 - The second boundary.\n\t*/\n\tstatic clamp(val, bound1 = 0, bound2 = 1) {\n\t\tif (typeof(val) === \"number\") {\n\t\t\tconst min = Math.min(bound1, bound2);\n\t\t\tconst max = Math.max(bound1, bound2);\n\t\t\treturn Math.min(max, Math.max(min, val));\n\t\t}\n\t\t// else if (val instanceof Vec2) {\n\t\t// \tlet x = Math.min(max.x, Math.max(min.x, val.x));\n\t\t// \tlet y = Math.min(max.y, Math.max(min.y, val.y));\n\t\t// \treturn new Vec2(x, y);\n\t\t// }\n\t\t// else if (val instanceof Vec3) {\n\t\t// \tlet x = Math.min(max.x, Math.max(min.x, val.x));\n\t\t// \tlet y = Math.min(max.y, Math.max(min.y, val.y));\n\t\t// \tlet z = Math.min(max.z, Math.max(min.z, val.z));\n\t\t// \treturn new Vec3(x, y, z);\n\t\t// }\n\t\t// else if (val instanceof Vec4) {\n\t\t// \tlet x = Math.min(max.x, Math.max(min.x, val.x));\n\t\t// \tlet y = Math.min(max.y, Math.max(min.y, val.y));\n\t\t// \tlet z = Math.min(max.z, Math.max(min.z, val.z));\n\t\t// \tlet w = Math.min(max.w, Math.max(min.w, val.w));\n\t\t// \treturn new Vec4(x, y, z, w);\n\t\t// }\n\t\telse {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/** Interpolate linearly from the first value to the second based on the third (0 to 1) */\n\tstatic lerp(v1, v2, percent) {\n\t\tif (typeof(v1) === \"number\")\n\t\t\treturn v1 + (v2 - v1) * percent;\n\t\telse if (v1 instanceof Vec2) {\n\t\t\tlet x = v1.x + (v2.x - v1.x) * percent;\n\t\t\tlet y = v1.y + (v2.y - v1.y) * percent;\n\t\t\treturn new Vec2(x, y);\n\t\t}\n\t\telse if (v1 instanceof Vec3) {\n\t\t\tlet x = v1.x + (v2.x - v1.x) * percent;\n\t\t\tlet y = v1.y + (v2.y - v1.y) * percent;\n\t\t\tlet z = v1.z + (v2.z - v1.z) * percent;\n\t\t\treturn new Vec3(x, y, z);\n\t\t}\n\t\telse if (v1 instanceof Vec4) {\n\t\t\tlet x = v1.x + (v2.x - v1.x) * percent;\n\t\t\tlet y = v1.y + (v2.y - v1.y) * percent;\n\t\t\tlet z = v1.z + (v2.z - v1.z) * percent;\n\t\t\tlet w = v1.w + (v2.w - v1.w) * percent;\n\t\t\treturn new Vec4(x, y, z, w);\n\t\t}\n\t\telse\n\t\t\treturn undefined;\n\t}\n\n\t/** Prints a stack trace to the console. */\n\tstatic stackTrace() {\n\t\treturn console.log(new Error().stack);\n\t}\n\t\n\t/** Creates or updates a text layer in the corner of the screen. \n\t * @param {string} text - The text that the layer should display.\n\t * @param {string} name - The name of the text layer to create or update.\n\t * @param {number} displayTime - How many milliseconds the message should be displayed for.\n\t*/\n\tstatic debugText(text, name = \"_defaultLayerName\", displayTime = 5000) {\n\t\tif (bEnableDebugText && name !== undefined && text !== undefined) {\n\t\t\tlet layer = thisScene.getLayer(name.toString() + \"_debugText\");\n\t\t\tif (layer) {\n\t\t\t\tif (layer.text != text) {\n\t\t\t\t\tlayer.text = text;\n\t\t\t\t\tlayer.lastChanged = layer.lastUpdated = new Date().getTime();\n\t\t\t\t\tlayer.displayTime = displayTime;\n\t\t\t\t\tlayer.color = scriptProperties.debugText_FlashColor;\n\t\t\t\t\tlayer.scale = new Vec3(debugText_FlashScale * _canvasToScreen);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tlayer.lastUpdated = new Date().getTime();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet layerSettings = new Object();\n\t\t\t\tif (engine.canvasSize.x !== 0) {\n\t\t\t\t\tlayerSettings.origin = \"0, \" + (engine.canvasSize.y - debugText_Layers.length * (debugText_Size * 3 + 10)) + \", 0\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet ct = thisScene.getCameraTransforms();\n\t\t\t\t\tlet forward = ct.center.subtract(ct.eye).normalize();\n\t\t\t\t\tlet up = ct.up;\n\t\t\t\t\tlet right = forward.cross(up);\n\t\t\t\t\tlet pos = new Vec3(0, .5, 0);//ct.eye.add(forward);//.add(right);\n\t\t\t\t\tlayerSettings.origin = `${pos.x}, ${pos.y}, ${pos.z}`;\n\t\t\t\t}\n\t\t\t\tlayerSettings.name = name.toString() + \"_debugText\";\n\t\t\t\tlayerSettings.text = text;\n\t\t\t\tlayerSettings.pointsize = debugText_Size;\n\t\t\t\tlayerSettings.font = \"systemfont_consolas\";\n\n\t\t\t\tlayerSettings.verticalalign = \"top\";\n\t\t\t\tlayerSettings.horizontalalign = \"left\";\n\t\t\t\tlayerSettings.color = scriptProperties.debugText_FlashColor.x + \", \" + scriptProperties.debugText_FlashColor.y + \", \" + scriptProperties.debugText_FlashColor.z;\n\t\t\t\tlayerSettings.opaquebackground = debugText_ShowBackground;\n\t\t\t\tlayerSettings.backgroundcolor = debugText_BackgroundColor;\n\t\t\t\tlayerSettings.padding = 0;\n\t\t\t\tlayerSettings.alpha = debugText_Alpha;\n\t\t\t\tlayer = thisScene.createLayer(layerSettings);\n\t\t\t\tlayer.lastChanged = layer.lastUpdated = new Date().getTime();\n\t\t\t\tlayer.displayTime = displayTime;\n\t\t\t\tdebugText_Layers.push(layer);\n\t\t\t}\n\t\t}\n\t}\n}\n\nshared.OMGHelpers = OMGHelpers;",
				"scriptproperties" : 
				{
					"debugText_FlashColor" : "0.49804 1.00000 1.00000"
				},
				"value" : false
			}
		},
		{
			"id" : 59,
			"locktransforms" : true,
			"name" : "Mural Root",
			"origin" : 
			{
				"script" : "'use strict';\nconst OMGHelpers = shared.OMGHelpers;\n\n/** Stops the mural from sliding at all. */\nlet scrollingDisabled = false;\n\n/** Layer's target X position when cursor is on the left side of the screen. */\nlet leftExtent = 0.0;\n/** Layer's target X position when cursor is on the right side of the screen. */\nlet rightExtent = 0.0;\n\nlet targetX = 0.0;\n\n/** How fast the mural can slide. */\nconst maxSpeed = 200.0;\n\n/** How quickly the mural movement ramps up based on cursor distance. */\nconst accel = 0.3;\n\n\n/**\n * Slide mural towards the cursor\n */\nexport function update() {\n\tif (!scrollingDisabled) {\n\t\tcalcTargetX();\n\t\tconst speed = OMGHelpers.clamp((targetX - thisLayer.origin.x) * accel, -maxSpeed, maxSpeed) * engine.frametime;\n\t\tthisLayer.origin = new Vec3(thisLayer.origin.x + speed, thisLayer.origin.y, 0.0);\n\t}\n}\n\n\n/**\n * Check initial screen bounds and cursor position.\n */\nexport function init() {\n\tcalcBounds();\n\tcalcTargetX();\n\tthisLayer.origin = new Vec3(targetX, engine.canvasSize.y / 2.0, 0.0);\n}\n\n\n/**\n * @param {Vec2} New screen dimensions\n */\nexport function resizeScreen(size) {\n\tcalcBounds();\n\tcalcTargetX();\n}\n\nfunction calcBounds() {\n\tconst screenAspectRatio = engine.screenResolution.x / engine.screenResolution.y;\n\tconst muralLayer = thisScene.getLayer(\"Mural\");\n\tconst muralAspectRatio = muralLayer.size.x / muralLayer.size.y;\n\t// Screen is wider than the mural. No scrolling needed.\n\tif (screenAspectRatio > muralAspectRatio) {\n\t\tleftExtent = rightExtent = engine.canvasSize.x / 2.0;\n\t}\n\telse {\n\t\tconst screenWidth = screenAspectRatio * engine.canvasSize.y;\n\t\tconst muralWidth = muralAspectRatio * engine.canvasSize.y;\n\t\tconst sideBuffer = (muralWidth - screenWidth) / 2.0;\n\t\tleftExtent = engine.canvasSize.x / 2.0 + sideBuffer;\n\t\trightExtent = engine.canvasSize.x / 2.0 - sideBuffer;\n\t}\n\treturn new Vec2(leftExtent, rightExtent);\n}\n\nfunction calcTargetX() {\n\tconst lerp = input.cursorScreenPosition.x / engine.screenResolution.x;\n\ttargetX = OMGHelpers.lerp(leftExtent, rightExtent, lerp);\n\ttargetX = OMGHelpers.clamp(targetX, rightExtent, leftExtent);\n\treturn targetX;\n}\n\n\n/**\n * @param {Object} changedUserProperties - only includes user properties that were recently changed!\n */\nexport function applyUserProperties(changedUserProperties) {\n\tif (changedUserProperties.disablescrolling !== undefined) {\n\t\tscrollingDisabled = changedUserProperties.disablescrolling;\n\t\tif (scrollingDisabled) {\n\t\t\tthisLayer.origin = new Vec3(engine.canvasSize.x / 2.0, engine.canvasSize.y / 2.0, 0.0);\n\t\t}\n\t}\n}\n",
				"value" : "496.00000 96.00000 0.00000"
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.27059 0.40000 0.49412",
			"id" : 52,
			"image" : "models/mural.json",
			"locktransforms" : true,
			"name" : "Mural",
			"parent" : 59,
			"size" : "992.00000 192.00000",
			"visible" : 
			{
				"user" : 
				{
					"condition" : "nearest",
					"name" : "texturefiltering"
				},
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.27059 0.40000 0.49412",
			"id" : 49,
			"image" : "models/mural_filtered.json",
			"locktransforms" : true,
			"name" : "Mural (filtered)",
			"parent" : 59,
			"size" : "992.00000 192.00000",
			"visible" : 
			{
				"user" : 
				{
					"condition" : "bilinear",
					"name" : "texturefiltering"
				},
				"value" : false
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"castshadow" : false,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 31,
			"effects" : 
			[
				{
					"file" : "effects/omg_xray/effect.json",
					"id" : 125,
					"name" : "Cursor Light",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"multiply" : 1.25,
								"size" : 
								{
									"user" : "lightsize",
									"value" : 0.75
								}
							},
							"id" : 127,
							"textures" : [ null, "mural", "particle/halo" ]
						}
					],
					"visible" : 
					{
						"user" : 
						{
							"condition" : "nearest",
							"name" : "texturefiltering"
						},
						"value" : true
					}
				},
				{
					"file" : "effects/omg_xray/effect.json",
					"id" : 135,
					"name" : "Cursor Light (filtered)",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"multiply" : 1.25,
								"size" : 
								{
									"user" : "lightsize",
									"value" : 0.75
								}
							},
							"id" : 0,
							"textures" : [ null, "mural_filtered", "particle/halo" ]
						}
					],
					"visible" : 
					{
						"user" : 
						{
							"condition" : "bilinear",
							"name" : "texturefiltering"
						},
						"value" : false
					}
				},
				{
					"file" : "effects/pulse/effect.json",
					"id" : 144,
					"name" : "Flicker",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"amount" : 0,
								"bounds" : "0 1",
								"noiseamount" : 
								{
									"user" : "lightflickeramount",
									"value" : 0.1
								},
								"noisespeed" : 0.69999999,
								"phase" : 0,
								"power" : 1,
								"speed" : 5,
								"tinthigh" : "1 1 1",
								"tintlow" : "1 1 1"
							},
							"id" : 145
						}
					],
					"visible" : true
				},
				{
					"file" : "effects/tint/effect.json",
					"id" : 149,
					"name" : "",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 2
							},
							"constantshadervalues" : 
							{
								"alpha" : 1,
								"color" : 
								{
									"user" : "lighttint",
									"value" : "1.00000 0.75294 0.52157"
								}
							},
							"id" : 150
						}
					],
					"visible" : true
				}
			],
			"id" : 126,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Mural Light",
			"parent" : 59,
			"scale" : "0.25000 0.25000 0.25000",
			"size" : "3968.00000 768.00000"
		}
	],
	"version" : 4
}